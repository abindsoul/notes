import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.RbRFL2qC.js";const E=JSON.parse('{"title":"Node 基础","description":"","frontmatter":{},"headers":[],"relativePath":"md/node-md/basis.md","filePath":"md/node-md/basis.md","lastUpdated":1722333745000}'),p={name:"md/node-md/basis.md"},l=n(`<h1 id="node-基础" tabindex="-1">Node 基础 <a class="header-anchor" href="#node-基础" aria-label="Permalink to &quot;Node 基础&quot;">​</a></h1><h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h2><p>配置文件会声明项目的一些信息，以及管理依赖</p><p>主要看下这些：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开发依赖 生产环境就不需要了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如 webpack vite rollup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vitepress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产依赖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如 vue vuex vue-router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对等依赖 给编写插件或npm包的开发人员使用的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如要开发一个vite插件 那就在这里装vite，因为插件要依赖vite</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件装在生产环境就行了 避免再次在生产环境装vite</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;vite-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="npm-config-list" tabindex="-1">npm config list <a class="header-anchor" href="#npm-config-list" aria-label="Permalink to &quot;npm config list&quot;">​</a></h2><p>查看当前配置，切换镜像什么的在我的博客里有这里就不赘述了</p><h2 id="npm-install" tabindex="-1">npm install <a class="header-anchor" href="#npm-install" aria-label="Permalink to &quot;npm install&quot;">​</a></h2><p>安装依赖,所有依赖都会存放在<code>node_modules</code>目录下, ,默认采用<strong>扁平化</strong>的方式安装，排序规则：</p><p>.bin -&gt; @xxx -&gt;首字母排序</p><p>使用广度优先遍历依赖树，会首先处理根目录下的依赖，然后逐层处理每个依赖包的依赖，直到所有依赖处理完</p><p>处理依赖时还会检查版本是否符合依赖树中其他依赖的版本要求，不符合会尝试安装合适的依赖</p><p>当然扁平化是理想的状态下，如果在二级模块使用了相同的依赖但是不同版本，那就会重新搞一层 <code>node_modules</code> 目录，就是非扁平化了</p><p>运行<code>npm install</code> 时会首先读取 config 配置文件，其顺序如下： npm config list -&gt; 项目级.npmrc -&gt; 用户级.npmrc （在 c 盘用用户目录） -&gt; 全局的.npmrc （c 盘 AppData&gt;npm）-&gt; npm 内置.npmrc （nodejs 装在哪就在哪里）</p><p>随后检查是否存在 package-lock.json</p><ul><li><p>有：</p><ol><li>比较依赖版本，版本不同就根据 package.json 的版本去下载然后更新 package-lock.json 中的版本</li><li>版本相同就检查是否有缓存，有就使用缓存，没有就去下载</li></ol></li><li><p>没有：</p><ol><li>根据 package.json 获取包的信息构建依赖树与扁平化（同时进行）</li><li>检查缓存，有就使用缓存，没有就去下载</li></ol></li></ul><p>举例 .npmrc 文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://registry.npmjs.org/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">定义</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry，即</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的包下载源</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://proxy.example.com:8080/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">定义</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的代理服务器，用于访问网络</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https-proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://proxy.example.com:8080/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">定义</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 代理服务器，用于访问网络</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strict-ssl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">是否在</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 证书验证错误时退出</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cafile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/path/to/cafile.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">定义自定义</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 证书文件的路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user-agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm-version}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node/{node-version}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {platform}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">自定义请求头中的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> User-Agent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">安装包时是否自动保存到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dependencies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save-dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">安装包时是否自动保存到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> devDependencies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save-exact</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">安装包时是否精确保存版本号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">engine-strict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">是否在安装时检查依赖的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 版本是否符合要求</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scripts-prepend-node-path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">是否在运行脚本时自动将</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的路径添加到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 环境变量中</span></span></code></pre></div><h2 id="package-lock-json" tabindex="-1">package-lock.json <a class="header-anchor" href="#package-lock-json" aria-label="Permalink to &quot;package-lock.json&quot;">​</a></h2><p>喜闻乐见锁定依赖版本号，抛开 <code>package</code> 字段，</p><ul><li><code>version</code> 该参数指定了当前包的版本号</li><li><code>resolved</code> 该参数指定了当前包的下载地址</li><li><code>integrity</code> 用于验证包的完整性</li><li><code>dev</code> 是否是一个开发依赖包</li><li><code>bin</code> 该参数指定了当前包中可执行文件的路径和名称</li><li><code>engines</code> 该参数指定了当前包所依赖的Node.js版本范围</li></ul><p>缓存就是用依赖的 <code>integrity</code>、<code>version</code>和名字生成唯一key，在cache 里查找</p><p>可以使用 npm cofig list 查看 cache 路径</p><h2 id="npm-run-xxx" tabindex="-1">npm run xxx <a class="header-anchor" href="#npm-run-xxx" aria-label="Permalink to &quot;npm run xxx&quot;">​</a></h2><p>运行 <code>package.json</code> 中的 <code>scripts</code> 字段配置的命令</p><p>命令会注入到 <code>node_modules</code> 的 <code>.bin</code> 目录下</p><ul><li>.sh 给 Unix Linux MacOS用</li><li>.cmd .ps1 分别给 Windows用的 cmd 和 powershell用 （这就是为毛能跨平台）</li></ul><p>优先在项目的<code>node_modules/.bin</code>找，找不到就去全局的<code>node_modules</code>找,还找不到就去环境变量找，再找不到就报错</p><h3 id="pre-与-post" tabindex="-1">pre 与 post <a class="header-anchor" href="#pre-与-post" aria-label="Permalink to &quot;pre 与 post&quot;">​</a></h3><p>相当于生命周期一样，执行顺序为：prexxx &gt; xxx &gt; postxxx</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;predev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node xxx.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node xxx.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postdev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node xxx.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-label="Permalink to &quot;npx&quot;">​</a></h2><p>命令行工具，npm 5.2.0 以上自带 低版本手动安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>在上面我们会在<code>script</code>配置命令来执行一些可执行文件或命令，npx则可以直接来执行</p><p>优势：</p><ul><li>避免全局安装：npx允许你执行npm package，而不需要你先全局安装它</li><li>总是使用最新版本：如果你没有在本地安装相应的npm package， npx会从npm的package仓库中下载并使用最新版</li><li>执行任意npm包：npx不仅可以执行在package.json的scripts部分定义的命令，还可以执行任何npm package</li><li>执行GitHub gist：npx甚至可以执行GitHub gist或者其他公开的JavaScript文件</li></ul><h3 id="npm与npx的区别" tabindex="-1">npm与npx的区别 <a class="header-anchor" href="#npm与npx的区别" aria-label="Permalink to &quot;npm与npx的区别&quot;">​</a></h3><ul><li>npx 侧重于执行命令，虽然会自动安装模块（执行结束后自动删除掉下载的模块而且都是最新的）</li><li>npm 侧重于安装卸载某个模块</li></ul><blockquote><p>npm ls -g 可以查看全局安装了哪些可执行文件</p></blockquote><h2 id="npm私服" tabindex="-1">npm私服 <a class="header-anchor" href="#npm私服" aria-label="Permalink to &quot;npm私服&quot;">​</a></h2><p>使用 <code>verdaccio</code> 快速构建私服</p><p>安装：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verdaccio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>执行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认直接运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verdaccio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#指定端口 (默认端口 4873)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verdaccio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span></code></pre></div><p>指定端口后会有一个可以访问的页面，里面有注册的命令，登录的命令等，发包还是使用 <code>npm publish --registry 这里要本地的地址</code></p><p>自己的npm私服，也可以使用<code>npm config set registry</code>指定私服地址后再进行<code>npm publish</code>，下载仍然是<code>npm install</code></p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><p><code>cjs</code>和<code>esm</code>，详情看这里：<a href="./../js-md/senior.html#模块化">模块化</a></p><p><code>esm</code>在node环境下天然不支持导入json,在高版本下可以使用 <code>assert {type:json}</code>强行支持</p><p>区别：</p><ul><li>cjs是基于运行时的同步加载，esm是基于编译时的异步加载</li><li>cjs是可以修改值的，esm值并且不可修改（可读的）</li><li>cjs不可以tree shaking，esm支持tree shaking</li><li>commonjs中顶层的this指向这个模块本身，而ES6中顶层this指向undefined</li></ul><h2 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h2><blockquote><p>node中没有DOM和BOM的API，但其他的ECMAscriptAPI基本都能用</p></blockquote><p>使用<code>global</code>来定义全局变量(仅node环境)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p>使用<code>globalThis</code>来定义全局变量（会自己判断环境,浏览器环境window访问定义的变量，<em>ECMAScript 2020 引入globalThis</em>）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">globalThis.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><h3 id="dirname" tabindex="-1">dirname <a class="header-anchor" href="#dirname" aria-label="Permalink to &quot;dirname&quot;">​</a></h3><p>dirname 获取文件所在目录的绝对路径</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当前执行脚本的目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span></code></pre></div><h3 id="filename" tabindex="-1">filename <a class="header-anchor" href="#filename" aria-label="Permalink to &quot;filename&quot;">​</a></h3><p>filename 获取当前执行脚本的文件名</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//会带有当前执行脚本的目录及文件名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//文件名</span></span></code></pre></div><h3 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;Buffer&quot;">​</a></h3><p>Buffer是一个类似数组的对象，用来操作二进制数据</p><h3 id="process" tabindex="-1">process <a class="header-anchor" href="#process" aria-label="Permalink to &quot;process&quot;">​</a></h3><p>process 进程信息</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如 运行 node index.js --nb66</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.argv);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回值是个数组里面有 nb66</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 也可获取路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 杀死进程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="csr-ssr-seo" tabindex="-1">CSR SSR SEO <a class="header-anchor" href="#csr-ssr-seo" aria-label="Permalink to &quot;CSR SSR SEO&quot;">​</a></h2><h3 id="csr" tabindex="-1">CSR <a class="header-anchor" href="#csr" aria-label="Permalink to &quot;CSR&quot;">​</a></h3><p>客户端渲染，不依赖服务器，vue，react SPA单页面应用</p><p>ToB 后台管理系统，大屏可视化</p><h3 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h3><p>服务端渲染，依赖服务器</p><p>ToC 新闻，博客，电子商务，门户网站</p><h3 id="seo" tabindex="-1">SEO <a class="header-anchor" href="#seo" aria-label="Permalink to &quot;SEO&quot;">​</a></h3><p>搜索引擎优化，提升用户体验</p><p>TDK:<code>title</code> ,<code>description</code>, <code>keywords</code></p><p>使用语义化标签</p>`,81),e=[l];function t(h,k,d,r,o,c){return a(),i("div",null,e)}const F=s(p,[["render",t]]);export{E as __pageData,F as default};
